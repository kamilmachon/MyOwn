import cv2
import numpy as np



selection = False
close = False
temp = 0
resize = 0
resize2 = 0
wsp = 0 # number of rectangle
i = 0 # amount of rectangles
w, h = 4, 30
rectangles = [[0 for x in range(w)] for y in range(h)] #creating fixed array

roi = [] #array for roi coordinates

def roi_selection(event, x, y, flags, param):
    # Refernce to the global variables
    global selection, roi, temp, resize
    # On Left mouse button click records roi with mouse selection status to True
    if event == cv2.EVENT_LBUTTONDOWN:
        selection = True
        roi = [x, y, x, y]


    # On Mouse movement records roi with mouse selection status to True
    elif event == cv2.EVENT_MOUSEMOVE:
        if selection == True:
            roi[2] = x
            roi[3] = y


    # If Left mouse button is released changes mouse selection status to False
    elif event == cv2.EVENT_LBUTTONUP:
        selection = False
        temp = 1
        resize = 0
        roi[2] = x
        roi[3] = y



# Path of image file to be read
image_read_path = '/home/hudson/Documents/Delphi/lena.png'

# Original Image Window Name
window_name = 'Input Image'

# Cropped Image Window Name
window_crop_name = 'Cropped Image'

# Escape ASCII Keycode
esc_keycode = 27

# Time to waitfor (msec)
wait_time = 1

input_img = cv2.imread(image_read_path, cv2.IMREAD_UNCHANGED)
cv2.namedWindow(window_name, cv2.WINDOW_AUTOSIZE)
cv2.setMouseCallback(window_name, roi_selection)
clone = input_img.copy()

while close == False:
    # Show original image in window
    cv2.imshow(window_name, input_img)

    # if roi has all parameters filled
    if len(roi) == 4:
        # Make a copy of orginal image before drawing rectangle on it
        input_img = clone.copy()
        for j in range(i):
            cv2.rectangle(input_img, (rectangles[j][0], rectangles[j][1]), (rectangles[j][2], rectangles[j][3]), (255, 0, 0), 3)

        if i > 0 and selection == True:
            for j in range(i):

                if (roi[0] > rectangles[j][0] - 10 and roi[0] < rectangles[j][0] + 10) and ( roi[1] > rectangles[j][1] - 10 and roi[1] < rectangles[j][1] + 10):    #working only for upper-left corner, interactive area is a 10x10 square
                    print "got ya"
                    resize = 1
                    while selection == True and resize == 1:
                        print "dickbutt"
                        cv2.imshow(window_name, input_img)
                        input_img = clone.copy()
                        cv2.rectangle(input_img, (roi[2], roi[3]), (rectangles[j][2], rectangles[j][3]), (0, 255, 0), 2)
                        resize2 = 1
                        wsp = j
                        cv2.waitKey(wait_time)
                #elifs for lines and remaining corners

                else: #drawing new crop
                    cv2.rectangle(input_img, (roi[0], roi[1]), (roi[2], roi[3]), (0, 255, 0), 2)

        elif (i == 0 and selection == True):
            cv2.rectangle(input_img, (roi[0], roi[1]), (roi[2], roi[3]), (0, 255, 0), 2)

        if (selection == False and temp == 1):
            if resize2 != 1:
                temp = 0
                rectangles[i] = roi
                i = i + 1
            elif resize2 == 1:
                temp = 0
                rectangles[wsp] = [roi[2], roi[3], rectangles[wsp][2], rectangles[wsp][3]]
                resize2 = 0

        # Make x and y coordiates for cropping in ascending order
        if roi[0] > roi[2]:
            x1 = roi[2]
            x2 = roi[0]
        else:
            x1 = roi[0]
            x2 = roi[2]
        if roi[1] > roi[3]:
            y1 = roi[3]
            y2 = roi[1]
        else:
            y1 = roi[1]
            y2 = roi[3]

    # Check if any key is pressed
    k = cv2.waitKey(wait_time)
    # Check if ESC key is pressed. ASCII Keycode of ESC=27
    if k == esc_keycode:
        cv2.destroyAllWindows()
        close = True

print rectangles
